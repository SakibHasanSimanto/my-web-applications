# -*- coding: utf-8 -*-
"""Threat Predictor_Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fFOrSiZet-VgJZ_t3YsbVWSHUWP5qY1h
"""

# -*- coding: utf-8 -*-
import streamlit as st
import pickle
import shap
import matplotlib.pyplot as plt
import numpy as np

# Load the model
with open('model.pkl', 'rb') as f:
    model = pickle.load(f)

# Load or create SHAP Explainer
try:
    with open("shap_explainer.pkl", "rb") as f:
        explainer = pickle.load(f)
except:
    explainer = shap.Explainer(model)  # Create explainer if not saved
    with open("shap_explainer.pkl", "wb") as f:
        pickle.dump(explainer, f)

# Streamlit app
st.title('Threat Predictor 1.0')
st.write('Enter your input in the following fields')

age = st.text_input('Age:')
ed_lvl = st.text_input('Education lvl:')
occu_type = st.text_input('Occupation type:')
rel_stat = st.text_input('Relationship Stats:')
city = st.text_input('City Type:')
empathy = st.text_input('Empathy score:')
anger = st.text_input('Anger control level:')
boundary = st.text_input('Respect for boundary:')
conf_res = st.text_input('Conflict resolution:')
online_cmnt = st.text_input('Online comment sentiment:')
past = st.text_input('Past complains:')
peer_rating = st.text_input('Friend and peer safety rating:')
soc_good = st.text_input('Participation in social good:')
alcohol = st.text_input('Alcohol consumption frequency:')
hist_aggressive = st.text_input('History of aggressive behavior:')

# Convert input to float (handling errors)

input_list = np.array([age, ed_lvl, occu_type, rel_stat,
                           city, empathy, anger, boundary,
                           conf_res, online_cmnt, past, peer_rating,
                           soc_good, alcohol, hist_aggressive]).reshape(1, -1)


if st.button('Predict'):
    try:
        prediction = model.predict(input_list)
        st.success(f"Prediction: {prediction[0]}")
    except Exception as e:
        st.error(f"Error: {e}")

if st.button('XAI Interpretation'):
    try:
        # Get SHAP values
        shap_values = explainer(input_list)

        # Plot SHAP force plot
        st.subheader("Feature Contribution (Force Plot)")
        fig, ax = plt.subplots()
        shap.force_plot(explainer.expected_value, shap_values.values,
                        input_list, matplotlib=True, show=False)
        st.pyplot(fig)

        # Plot SHAP bar chart
        st.subheader("Feature Impact (Bar Chart)")
        fig, ax = plt.subplots()
        shap.bar_plot(shap_values, show=False)
        st.pyplot(fig)

    except Exception as e:
        st.error(f"Error in SHAP interpretation: {e}")
